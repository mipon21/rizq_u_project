name: Build iOS App

on:
  push:
    branches: [ main ]
    paths:
      - 'lib/**'
      - 'pubspec.yaml'
      - 'ios/**'
      - '.github/workflows/ios-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'lib/**'
      - 'pubspec.yaml'
      - 'ios/**'

jobs:
  build-ios:
    runs-on: macos-latest
    name: Build iOS App

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Setup Xcode
      run: |
        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
        sudo xcodebuild -license accept
    
    - name: Get dependencies
      run: |
        flutter doctor -v
        flutter pub get --verbose
        flutter pub deps
    
    - name: Clean iOS build
      run: |
        cd ios
        rm -rf Pods Podfile.lock
        rm -rf ~/Library/Developer/Xcode/DerivedData
        cd ..
        flutter clean
    
    - name: Setup iOS
      run: |
        cd ios
        # Ensure Podfile has correct platform version
        if ! grep -q "platform :ios, '15.5'" Podfile; then
          sed -i '' 's/platform :ios, '\''13.0'\''/platform :ios, '\''15.5'\''/' Podfile
        fi
        # Install pods with verbose output
        pod install --repo-update --verbose
        cd ..
    
    - name: Build iOS App Bundle
      run: |
        flutter clean
        flutter pub get
        # Ensure Flutter framework is properly linked
        flutter precache --ios
        flutter build ios --release --no-codesign --dart-define=CI=true --verbose
      env:
        CI: true
        FLUTTER_BUILD_NUMBER: ${{ github.run_number }}
        FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}
    
    - name: Create Export Options Plist
      run: |
        cd ios
        cat > exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <false/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF
        cd ..
    
    - name: Create IPA Archive
      run: |
        cd ios
        # Create archive without code signing
        xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/Runner.xcarchive archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
        # Export IPA without code signing
        xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/ipa -exportOptionsPlist exportOptions.plist
        cd ..
    
    - name: Upload iOS App Bundle
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ios-app-bundle-${{ github.run_number }}
        path: build/ios/iphoneos/Runner.app
        retention-days: 30
    
    - name: Upload IPA File
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ios-ipa-${{ github.run_number }}
        path: ios/build/ipa/Runner.ipa
        retention-days: 30 